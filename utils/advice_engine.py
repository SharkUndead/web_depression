def generate_advice_from_features(row):
    advice = []

    print("üîç D·ªØ li·ªáu nh·∫≠n v√†o advice_engine:", row.to_dict())

    sleep_map = {
        'Less than 5 hours': 4.5,
        '5-6 hours': 5.5,
        '7-8 hours': 7.5,
        'More than 8 hours': 9.0
    }

    # L·∫•y sleep_duration t·ª´ d·ªØ li·ªáu (b·∫Øt bu·ªôc c√≥)
    sleep_raw = row.get('sleep_duration')
    if sleep_raw is None:
        advice.append("‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin sleep_duration. Kh√¥ng th·ªÉ ƒë√°nh gi√° gi·∫•c ng·ªß.")
        sleep_hours = None
    elif isinstance(sleep_raw, str):
        sleep_hours = sleep_map.get(sleep_raw)
        if sleep_hours is None:
            advice.append(f"‚ö†Ô∏è Gi√° tr·ªã sleep_duration '{sleep_raw}' kh√¥ng h·ª£p l·ªá.")
    else:
        sleep_hours = float(sleep_raw)

    suicidal_risk = row.get('suicidal_risk_index', 0)
    total_stress = row.get('total_stress', 0)
    resilience = row.get('resilience_index', 3)

    if suicidal_risk >= 20:
        advice.append("‚ö†Ô∏è Nguy c∆° tr·∫ßm c·∫£m r·∫•t cao! H√£y t√¨m g·∫∑p chuy√™n gia t√¢m l√Ω ho·∫∑c li√™n h·ªá ng∆∞·ªùi th√¢n ngay.")
    elif suicidal_risk >= 15:
        advice.append("‚ö†Ô∏è Nguy c∆° tr·∫ßm c·∫£m cao. C·∫ßn ch√∫ √Ω v√† h·ªó tr·ª£ k·ªãp th·ªùi.")

    # Ch·ªâ ƒë√°nh gi√° sleep n·∫øu sleep_hours ƒë√£ x√°c ƒë·ªãnh
    if sleep_hours is not None:
        if sleep_hours < 6 and total_stress >= 15:
            advice.append("B·∫°n ƒëang thi·∫øu ng·ªß v√† ch·ªãu cƒÉng th·∫≥ng cao. H√£y ngh·ªâ ng∆°i, t·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng, thi·ªÅn.")
        elif sleep_hours < 6:
            advice.append("C·ªë g·∫Øng ng·ªß √≠t nh·∫•t 7-9 ti·∫øng m·ªói ng√†y ƒë·ªÉ c·∫£i thi·ªán s·ª©c kh·ªèe t√¢m th·∫ßn.") 
        elif sleep_hours > 9:
            advice.append("Ng·ªß qu√° nhi·ªÅu c≈©ng kh√¥ng t·ªët, h√£y duy tr√¨ 7-9 ti·∫øng/ƒë√™m.")

    if total_stress >= 20:
        advice.append("T·ªïng stress c·ªßa b·∫°n ƒëang r·∫•t cao. H√£y gi·∫£m √°p l·ª±c h·ªçc t·∫≠p/c√¥ng vi·ªác, t√¨m ki·∫øm s·ª± h·ªó tr·ª£.")
    elif total_stress >= 15:
        advice.append("B·∫°n ƒëang c√≥ d·∫•u hi·ªáu cƒÉng th·∫≥ng. H√£y s·∫Øp x·∫øp th·ªùi gian h·ª£p l√Ω v√† th∆∞ gi√£n.")

    if resilience < 2:
        advice.append("TƒÉng c∆∞·ªùng s·ª©c kh·ªèe tinh th·∫ßn b·∫±ng th·ªÉ d·ª•c, thi·ªÅn, yoga ho·∫∑c g·∫∑p chuy√™n gia.")

    if not advice:
        advice.append("üéâ B·∫°n ƒëang duy tr√¨ th√≥i quen kh√° t·ªët. H√£y ti·∫øp t·ª•c gi·ªØ g√¨n s·ª©c kh·ªèe v√† tinh th·∫ßn nh√©!")

    return advice
