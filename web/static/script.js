document.addEventListener('DOMContentLoaded', function() {
    // --- KHAI B√ÅO BI·∫æN ---
    const predictForm = document.getElementById('predict-form');
    const indexForms = document.querySelectorAll('.index-form');
    const resultBox = document.getElementById('result-box');
    const resultTitle = document.getElementById('result-title');
    const resultContent = document.getElementById('result-content');
    const tabTriggers = document.querySelectorAll('#mainTab button[data-bs-toggle="tab"]');
    const tabResults = {};

    // --- LOGIC KI·ªÇM TRA L·ªñI (VALIDATION) ---

    /**
     * H√†m n√†y ki·ªÉm tra m·ªôt tr∆∞·ªùng (field) duy nh·∫•t v√† tr·∫£ v·ªÅ true/false.
     * N√≥ c≈©ng s·∫Ω c·∫≠p nh·∫≠t giao di·ªán (th√™m/x√≥a class l·ªói).
     * @param {HTMLElement} field - Ph·∫ßn t·ª≠ input/select c·∫ßn ki·ªÉm tra.
     * @returns {boolean} - True n·∫øu h·ª£p l·ªá, false n·∫øu kh√¥ng.
     */
    function validateField(field) {
        let isValid = true;
        const group = field.closest('.radio-group');

        // Reset tr·∫°ng th√°i l·ªói tr∆∞·ªõc
        field.classList.remove('is-invalid');
        if (group) {
            group.classList.remove('is-invalid');
        }

        // B·∫Øt ƒë·∫ßu ki·ªÉm tra
        if (field.id === 'age_input') {
            const ageFeedback = document.getElementById('age-feedback');
            if (field.value.trim() === '') {
                isValid = false;
                ageFeedback.textContent = 'Vui l√≤ng nh·∫≠p tu·ªïi c·ªßa b·∫°n.';
            } else {
                const age = parseInt(field.value, 10);
                if (!(age >= 18 && age <= 24)) {
                    isValid = false;
                    ageFeedback.textContent = 'H·ªá th·ªëng ch·ªâ h·ªó tr·ª£ ƒë·ªô tu·ªïi t·ª´ 18 ƒë·∫øn 24.';
                }
            }
        } else if (field.type === 'radio') {
            if (group && !group.querySelector('input[type="radio"]:checked')) {
                isValid = false;
            }
        } else { // C√°c tr∆∞·ªùng input text, number, select kh√°c
            if (!field.value.trim()) {
                isValid = false;
            }
        }

        // C·∫≠p nh·∫≠t giao di·ªán d·ª±a tr√™n k·∫øt qu·∫£ ki·ªÉm tra
        if (!isValid) {
            if (field.type === 'radio' && group) {
                group.classList.add('is-invalid');
            } else {
                field.classList.add('is-invalid');
            }
        }
        return isValid;
    }

    /**
     * H√†m n√†y ki·ªÉm tra TO√ÄN B·ªò form b·∫±ng c√°ch g·ªçi validateField cho t·ª´ng tr∆∞·ªùng.
     * ƒê∆∞·ª£c s·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "D·ª± ƒëo√°n".
     * @returns {boolean} - True n·∫øu to√†n b·ªô form h·ª£p l·ªá.
     */
    function validatePredictForm() {
        let isFormValid = true;
        predictForm.querySelectorAll('[required]').forEach(field => {
            if (!validateField(field)) {
                isFormValid = false;
            }
        });
        return isFormValid;
    }

    // --- G√ÅN S·ª∞ KI·ªÜN ---

    if (predictForm) {
        // 1. G√°n s·ª± ki·ªán SUBMIT: Ki·ªÉm tra to√†n b·ªô form
        predictForm.addEventListener('submit', function(event) {
            event.preventDefault();
            if (validatePredictForm()) {
                const data = Object.fromEntries(new FormData(predictForm).entries());
                handleRequest('/predict', data, 'H·ªá th√¥ng ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù...', displayPredictionResult);
            } else {
                console.log('Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
            }
        });

        // 2. G√°n s·ª± ki·ªán BLUR: Ki·ªÉm tra t·ª©c th√¨ ƒë·ªÉ n√¢ng cao tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
        predictForm.querySelectorAll('[required]').forEach(field => {
            field.addEventListener('blur', function() {
                validateField(this);
            });
        });
    }

    function hideResultBox() {
        if (resultBox) {
            resultBox.style.display = 'none';
            resultTitle.innerText = '';
            resultContent.innerHTML = '';
        }
    }

    tabTriggers.forEach(triggerEl => {
        triggerEl.addEventListener('shown.bs.tab', function(event) {
            const newTabId = event.target.getAttribute('data-bs-target').substring(1);
            const storedResult = tabResults[newTabId];
            if (storedResult) {
                resultBox.style.display = 'block';
                resultBox.className = storedResult.className;
                resultTitle.innerHTML = storedResult.title;
                resultContent.innerHTML = storedResult.content;
            } else {
                hideResultBox();
            }
        });
    });

    if (indexForms) {
        indexForms.forEach(form => {
            form.addEventListener('submit', function(event) {
                event.preventDefault();
                const category = form.dataset.category;
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());
                data.category = category;
                handleRequest('/calculate_index', data, 'ƒêang t√≠nh to√°n...', displayIndexResult);
            });
        });
    }

    const sliders = document.querySelectorAll('.slider-input');
    sliders.forEach(slider => {
        const valueDisplay = slider.nextElementSibling;
        function updateSliderAppearance() {
            if (valueDisplay) { valueDisplay.textContent = slider.value; }
        }
        slider.addEventListener('input', updateSliderAppearance);
        updateSliderAppearance();
    });

    // --- C√ÅC H√ÄM TI·ªÜN √çCH (G·ª≠i request, hi·ªÉn th·ªã k·∫øt qu·∫£) ---
    function handleRequest(url, data, loadingMessage, callback) {
        showLoading(loadingMessage);
        const activeTabPaneId = document.querySelector('.tab-pane.active').id;
        fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server') });
            }
            return response.json();
        })
        .then(result => {
            if (result.error) { displayError(result.error); } 
            else { callback(result, activeTabPaneId); }
        })
        .catch(error => {
            console.error('Error:', error);
            displayError(error.message || 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.');
        });
    }

    function showLoading(message) {
        resultBox.style.display = 'block';
        resultBox.className = 'result-box alert alert-info';
        resultTitle.innerText = message;
        resultContent.innerHTML = 'Vui l√≤ng ch·ªù trong gi√¢y l√°t.';
    }

    function displayError(errorMessage) {
        resultBox.style.display = 'block';
        resultBox.className = 'result-box alert alert-warning';
        resultTitle.innerText = 'L·ªói';
        resultContent.innerText = errorMessage;
    }

    function displayPredictionResult(result, tabId) {
        let className, title, content = '';
        if (result.support_info && result.support_info.disclaimer) {
            content += `<p class="fst-italic small text-secondary">${result.support_info.disclaimer}</p><hr>`;
        }
        if (result.prediction === 1) {
            className = 'result-box alert alert-danger';
            title = '‚ö†Ô∏è M·ª©c ƒë·ªô Lo √¢u / CƒÉng th·∫≥ng: CAO';
        } else {
            className = 'result-box alert alert-success';
            title = '‚úÖ M·ª©c ƒë·ªô Lo √¢u / CƒÉng th·∫≥ng: TH·∫§P - TRUNG B√åNH';
        }
        if (result.support_info) {
            if (result.support_info.critical_alerts && result.support_info.critical_alerts.length > 0) {
                content += `<h6>‚ùó C·∫£nh b√°o Quan tr·ªçng:</h6><p>${result.support_info.critical_alerts.join('<br>')}</p>`;
            }
            if (result.support_info.observations && result.support_info.observations.length > 0) {
                content += '<h6>üí° Nh·∫≠n ƒë·ªãnh t·ª´ h·ªá th·ªëng:</h6><ul>';
                result.support_info.observations.forEach(item => { content += `<li>${item}</li>`; });
                content += '</ul>';
            }
            if (result.support_info.resource_categories && result.support_info.resource_categories.length > 0) {
                content += '<h6>üßæ G·ª£i √Ω v√† Ngu·ªìn l·ª±c:</h6>';
                result.support_info.resource_categories.forEach(cat => { content += `<p><strong>- ${cat.title}:</strong> ${cat.content}</p>`; });
            }
        }
        resultBox.className = className;
        resultTitle.innerHTML = title;
        resultContent.innerHTML = content;
        tabResults[tabId] = { className, title, content };
    }

    function displayIndexResult(result, tabId) {
        const className = 'result-box alert alert-primary';
        const title = 'üìä K·∫øt qu·∫£ Ch·ªâ s·ªë';
        const content = `
            <p class="mb-2">K·∫øt qu·∫£ t√≠nh to√°n cho ch·ªâ s·ªë:</p>
            <h5 class="text-primary">${result.index_name}</h5>
            <h2><span class="badge bg-primary">${result.score} / 5</span></h2>
            <hr class="my-3">
            <div>
                <strong>Di·ªÖn gi·∫£i:</strong>
                <p class="fst-italic">${result.interpretation}</p>
            </div>
            <p class="mt-3 fst-italic small">L∆∞u √Ω: ƒêi·ªÉm c√†ng cao cho th·∫•y m·ª©c ƒë·ªô c·∫£m nh·∫≠n v·ªÅ ch·ªâ s·ªë ƒë√≥ c√†ng l·ªõn.</p>
        `;
        resultBox.className = className;
        resultTitle.innerHTML = title;
        resultContent.innerHTML = content;
        tabResults[tabId] = { className, title, content };
    }
});