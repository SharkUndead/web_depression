import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import sys
import os
import traceback
import glob
import pandas as pd
import joblib
import threading

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n ƒë·ªÉ import c√°c module ti·ªán √≠ch
try:
    # L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n (gi·∫£ s·ª≠ file n√†y n·∫±m trong th∆∞ m·ª•c con 'app')
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append(project_root)
    from utils.preprocessing import preprocess_user_data
    from utils.advice_engine import generate_advice_from_features
    from utils.file_predictor import predict_from_file as predict_file
    from utils.localization import FIELD_LABELS, YES_NO_OPTIONS, GENDER_OPTIONS
except ImportError:
    messagebox.showerror("L·ªói Import", "Kh√¥ng th·ªÉ t√¨m th·∫•y c√°c module trong th∆∞ m·ª•c 'utils'.\nVui l√≤ng ƒë·∫£m b·∫£o c·∫•u tr√∫c th∆∞ m·ª•c c·ªßa b·∫°n l√†:\n\nproject_root/\n|-- app/ (ch·ª©a file n√†y)\n|-- utils/\n|-- models/\n|-- ...")
    sys.exit()

# L·ªöP T·∫†O FRAME C√ì THANH CU·ªòN (PHI√äN B·∫¢N HO√ÄN CH·ªàNH)
class ScrollableFrame(ttk.Frame):
    def __init__(self, container, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        
        # 1. T·∫†O CANVAS V√Ä THANH CU·ªòN
        canvas = tk.Canvas(self, borderwidth=0, background="#ffffff", highlightthickness=0)
        scrollbar = ttk.Scrollbar(self, orient="vertical", command=canvas.yview)
        
        # 2. T·∫†O FRAME CON B√äN TRONG CANVAS ƒê·ªÇ CH·ª®A N·ªòI DUNG
        s = ttk.Style()
        s.configure("Scroll.TFrame", background="white")
        self.scrollable_frame = ttk.Frame(canvas, style="Scroll.TFrame")
        
        # 3. ƒê·∫∂T FRAME CON V√ÄO CANVAS
        self.frame_window_id = canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")

        # 4. H√ÄM V√Ä EVENT BINDING ƒê·ªÇ X·ª¨ L√ù CO GI√ÉN V√Ä CU·ªòN
        def on_frame_configure(event):
            # Khi frame n·ªôi dung thay ƒë·ªïi (th√™m widget...), c·∫≠p nh·∫≠t l·∫°i v√πng cu·ªôn
            canvas.configure(scrollregion=canvas.bbox("all"))

        def on_canvas_configure(event):
            # Khi canvas thay ƒë·ªïi k√≠ch th∆∞·ªõc (ph√≥ng to c·ª≠a s·ªï...),
            # bu·ªôc frame n·ªôi dung ph·∫£i c√≥ chi·ªÅu r·ªông b·∫±ng canvas.
            canvas.itemconfig(self.frame_window_id, width=event.width)
        
        self.scrollable_frame.bind("<Configure>", on_frame_configure)
        canvas.bind("<Configure>", on_canvas_configure)
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # ƒê√≥ng g√≥i
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # K√≠ch ho·∫°t cu·ªôn chu·ªôt
        self.bind_mousewheel(canvas)
        self.bind_mousewheel(self.scrollable_frame)
        self.scrollable_frame.bind("<Enter>", lambda _: self.bind_all_children(self.scrollable_frame))

    def bind_all_children(self, parent_widget):
         canvas = self.winfo_children()[0]
         for child in parent_widget.winfo_children():
            # G√°n s·ª± ki·ªán cu·ªôn chu·ªôt cho t·ª´ng widget con
            child.bind("<MouseWheel>", lambda e, c=canvas: self._on_mousewheel(e, c), add="+")
            if child.winfo_children():
                self.bind_all_children(child)

    def bind_mousewheel(self, widget):
        canvas = self.winfo_children()[0]
        widget.bind("<MouseWheel>", lambda e, c=canvas: self._on_mousewheel(e, c), add="+")

    def _on_mousewheel(self, event, canvas):
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")

# T·∫£i t√†i nguy√™n
def load_resources():
    try:
        # ƒê∆∞·ªùng d·∫´n an to√†n, ho·∫°t ƒë·ªông k·ªÉ c·∫£ khi ƒë√≥ng g√≥i b·∫±ng PyInstaller
        base_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        resources = {
            "base_dir": base_dir,
            "model": joblib.load(os.path.join(base_dir, 'models', 'lgbm_model.pkl')),
            "label_encoders": joblib.load(os.path.join(base_dir, 'models', 'label_encoders.pkl')),
            "feature_order": joblib.load(os.path.join(base_dir, 'models', 'feature_order_lightgbm.pkl'))
        }
        return resources
    except FileNotFoundError as e:
        messagebox.showerror("L·ªói nghi√™m tr·ªçng", f"Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh c·∫ßn thi·∫øt: {e.filename}")
        return None

resources = load_resources()
if not resources:
    sys.exit("Kh√¥ng th·ªÉ t·∫£i t√†i nguy√™n, ·ª©ng d·ª•ng ƒë√≥ng.")

# Danh s√°ch c√°c tr∆∞·ªùng (key n·ªôi b·ªô)
input_fields = [
    'age', 'city', 'degree', 'sleep_duration', 'dietary_habits',
    'work/study_hours', 'academic_pressure', 'study_satisfaction',
    'financial_stress', 'cgpa'
]
binary_fields = [
    'gender', 'have_you_ever_had_suicidal_thoughts_?', 
    'family_history_of_mental_illness'
]

# --- Giao di·ªán ng∆∞·ªùi d√πng ---
root = tk.Tk()
root.title("D·ª± ƒëo√°n Tr·∫ßm c·∫£m Sinh vi√™n")
root.geometry("1024x768")
root.resizable(True, True)
root.minsize(800, 600)

style = ttk.Style()
try:
    style.theme_use('vista') 
except tk.TclError:
    style.theme_use('clam') 

# --- S·ª¨A ƒê·ªîI: Th√™m style cho Frame vi·ªÅn ---
# 1. ƒê·ªãnh nghƒ©a m·ªôt style m·ªõi cho Frame ƒë·ªÉ l√†m vi·ªÅn
style.configure('Border.TFrame', background='white', relief='solid', borderwidth=1)

# 2. C·ªë g·∫Øng lo·∫°i b·ªè vi·ªÅn g·ªëc c·ªßa Entry v√† Combobox ƒë·ªÉ tr√°nh xung ƒë·ªôt
style.configure('TEntry', relief='flat')
# C·∫•u h√¨nh cho Combobox ph·ª©c t·∫°p h∆°n
style.layout('Custom.TCombobox', style.layout('TCombobox'))
style.configure('Custom.TCombobox', relief='flat')
style.map('Custom.TCombobox', fieldbackground=[('readonly', 'white')])

# --- Ph·∫ßn ·∫£nh n·ªÅn ---
ASSET_DIR = os.path.join(resources['base_dir'], 'app', 'assets', 'backgrounds')
bg_images = glob.glob(os.path.join(ASSET_DIR, '*.jpg')) + glob.glob(os.path.join(ASSET_DIR, '*.png'))
bg_photos = []
if bg_images:
    try:
        bg_photos = [ImageTk.PhotoImage(Image.open(p).resize((root.winfo_screenwidth(), root.winfo_screenheight()), Image.Resampling.LANCZOS)) for p in bg_images]
    except Exception as e:
        print(f"L·ªói t·∫£i ·∫£nh n·ªÅn: {e}")

bg_index = 0
bg_label = tk.Label(root)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)

def change_background():
    global bg_index
    if bg_photos:
        bg_label.config(image=bg_photos[bg_index])
        bg_index = (bg_index + 1) % len(bg_photos)
        root.after(5000, change_background)
change_background()

# --- Layout ch√≠nh ---
main_frame = ttk.Frame(root, padding=20)
main_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.9, relheight=0.9)
notebook = ttk.Notebook(main_frame)
notebook.pack(expand=True, fill="both", padx=10, pady=10)

# Kh·ªüi t·∫°o c√°c tab
frame_manual_scrollable = ScrollableFrame(notebook)
frame_manual = frame_manual_scrollable.scrollable_frame
style.configure("TFrame", background="white")
frame_file = ttk.Frame(notebook, padding=10, style="TFrame")
notebook.add(frame_manual_scrollable, text="Nh·∫≠p tay")
notebook.add(frame_file, text="D·ª± ƒëo√°n t·ª´ file")

# === H√†m d·ª± ƒëo√°n ===
def predict():
    try:
        user_input = {}
        for field in input_fields:
            value = entries[field].get().strip()
            if not value:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", f"Vui l√≤ng nh·∫≠p gi√° tr·ªã cho tr∆∞·ªùng: {FIELD_LABELS.get(field, field)}")
                return
            user_input[field] = value
        for field in binary_fields:
            value = radio_vars[field].get()
            if not value:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", f"Vui l√≤ng ch·ªçn gi√° tr·ªã cho tr∆∞·ªùng: {FIELD_LABELS.get(field, field)}")
                return
            user_input[field] = value
        df_raw = pd.DataFrame([user_input])
        df_processed = preprocess_user_data(df_raw.copy(), resources["label_encoders"])
        if df_processed.empty:
             messagebox.showerror("L·ªói d·ªØ li·ªáu", "D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá sau khi x·ª≠ l√Ω.")
             return
        advice = generate_advice_from_features(df_processed.iloc[0])
        df_final = df_processed[resources["feature_order"]]
        prediction = resources["model"].predict(df_final)[0]
        msg = "‚úÖ Kh√¥ng c√≥ d·∫•u hi·ªáu tr·∫ßm c·∫£m.\n" if prediction == 0 else "‚ö†Ô∏è C√≥ d·∫•u hi·ªáu TR·∫¶M C·∫¢M!\n"
        if advice:
            msg += "\nüßæ G·ª£i √Ω c·∫£i thi·ªán:\n- " + "\n- ".join(advice)
        result_text.config(state="normal")
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, msg)
        result_text.config(state="disabled")
    except Exception as e:
        messagebox.showerror("L·ªói", f"ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra: {e}")
        traceback.print_exc()

# === X√¢y d·ª±ng Tab Nh·∫≠p tay ===
# 1. C·∫•u h√¨nh grid c·ªßa frame_manual ƒë·ªÉ c√≥ c√°c c·ªôt ƒë·ªám co gi√£n
frame_manual.grid_columnconfigure(0, weight=1) 
frame_manual.grid_columnconfigure(2, weight=1) 

# 2. T·∫°o m·ªôt frame con ƒë·ªÉ ch·ª©a to√†n b·ªô n·ªôi dung, frame n√†y s·∫Ω kh√¥ng co gi√£n
content_form_frame = ttk.Frame(frame_manual, style="Scroll.TFrame")
content_form_frame.grid(row=0, column=1, pady=20) 

# 3. ƒê·∫∑t t·∫•t c·∫£ c√°c widget v√†o `content_form_frame`
entries = {}
radio_vars = {}
style.configure("TRadiobutton", background='white') # ƒê·∫£m b·∫£o radio button c√≥ n·ªÅn tr·∫Øng
ttk.Label(content_form_frame, text="üìã Nh·∫≠p th√¥ng tin sinh vi√™n", font=("Segoe UI", 14, "bold"), background='white').grid(row=0, column=0, columnspan=2, pady=10)
start_row_manual = 1


# --- S·ª¨A ƒê·ªîI: V√≤ng l·∫∑p t·∫°o widget ƒë∆∞·ª£c thay ƒë·ªïi ƒë·ªÉ s·ª≠ d·ª•ng k·ªπ thu·∫≠t "b·ªçc Frame" ---
for i, field in enumerate(input_fields):
    display_text = FIELD_LABELS.get(field, field.replace('_', ' ').capitalize())
    ttk.Label(content_form_frame, text=display_text, background='white').grid(row=start_row_manual + i, column=0, sticky='w', padx=5, pady=5)
    
    # T·∫°o m·ªôt Frame ƒë·ªÉ l√†m vi·ªÅn b·ªçc ngo√†i
    border_frame = ttk.Frame(content_form_frame, style='Border.TFrame')
    border_frame.grid(row=start_row_manual + i, column=1, padx=5, pady=5)
    
    if field in resources["label_encoders"]:
        values = list(resources["label_encoders"][field].classes_)
        # T·∫°o Combobox b√™n trong Frame vi·ªÅn
        cb = ttk.Combobox(border_frame, values=values, width=30, state="readonly", style='Custom.TCombobox')
        cb.pack(fill="both", expand=True)
        entries[field] = cb
    else:
        # T·∫°o Entry b√™n trong Frame vi·ªÅn
        entry = ttk.Entry(border_frame, width=33)
        entry.pack()
        entries[field] = entry


start_row_binary = start_row_manual + len(input_fields)
for i, field in enumerate(binary_fields):
    display_text = FIELD_LABELS.get(field, field.replace('_', ' ').capitalize())
    ttk.Label(content_form_frame, text=display_text, background='white').grid(row=start_row_binary + i, column=0, sticky='w', padx=5, pady=5)
    var = tk.StringVar()
    radio_vars[field] = var
    
    options = GENDER_OPTIONS if field == 'gender' else YES_NO_OPTIONS
    
    radio_container = ttk.Frame(content_form_frame, style="Scroll.TFrame")
    radio_container.grid(row=start_row_binary + i, column=1, sticky='w')

    for text, val in options:
        ttk.Radiobutton(radio_container, text=text, variable=var, value=val).pack(side=tk.LEFT)

predict_button_manual = ttk.Button(content_form_frame, text="üëâ D·ª∞ ƒêO√ÅN", command=predict)
predict_button_manual.grid(row=start_row_binary + len(binary_fields), column=0, columnspan=2, pady=20)

result_text = tk.Text(content_form_frame, height=10, width=80, font=("Segoe UI", 12), fg="white", bg="#2c2c2c", wrap="word", relief="solid", borderwidth=1)
result_text.grid(row=start_row_binary + len(binary_fields) + 1, column=0, columnspan=2, pady=15)
result_text.config(state="disabled")

# === X√¢y d·ª±ng Tab D·ª± ƒëo√°n t·ª´ file ===
frame_file.grid_columnconfigure(0, weight=1)
frame_file.grid_columnconfigure(2, weight=1)

content_file_frame = ttk.Frame(frame_file, style="TFrame")
content_file_frame.grid(row=0, column=1, pady=20)

def call_predict_from_file():
    path = selected_file_path.get()
    if not path:
        messagebox.showwarning("Ch∆∞a ch·ªçn file", "Vui l√≤ng ch·ªçn m·ªôt file CSV ƒë·ªÉ d·ª± ƒëo√°n.")
        return
    threading.Thread(target=run_prediction_task, daemon=True).start()

def run_prediction_task():
    path = selected_file_path.get()
    output_name = output_filename.get().strip() or "predicted_results.csv"
    if not output_name.lower().endswith('.csv'):
        output_name += '.csv'

    predict_file_button.config(state="disabled")
    file_result_label.config(text="ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...", foreground="blue")
    
    try:
        output_dir = os.path.join(resources["base_dir"], "data", "processed")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            
        result_msg = predict_file(path, output_name, os.path.join(resources["base_dir"], 'models', 'lgbm_model.pkl'), 
            os.path.join(resources["base_dir"], 'models', 'label_encoders.pkl'), os.path.join(resources["base_dir"], 'models', 'feature_order_lightgbm.pkl'), 
            output_dir)
        color = "green" if "‚úÖ" in result_msg else "red"
        file_result_label.config(text=result_msg, foreground=color)
    except Exception as e:
        file_result_label.config(text=f"‚ùå L·ªói: {e}", foreground="red")
        traceback.print_exc()
    finally:
        predict_file_button.config(state="normal")

ttk.Label(content_file_frame, text="üìÇ D·ª± ƒëo√°n t·ª´ file CSV", font=("Segoe UI", 14, "bold"), background='white').grid(row=0, column=0, columnspan=3, pady=10)

selected_file_path = tk.StringVar()
output_filename = tk.StringVar(value="predicted_results.csv")

file_entry = ttk.Entry(content_file_frame, textvariable=selected_file_path, width=60, state="readonly")
file_entry.grid(row=1, column=0, columnspan=2, padx=5, pady=5, sticky='ew')
ttk.Button(content_file_frame, text="üîç Ch·ªçn file", command=lambda: selected_file_path.set(filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")]))).grid(row=1, column=2, padx=(5, 0))

ttk.Label(content_file_frame, text="T√™n file k·∫øt qu·∫£:", background='white').grid(row=2, column=0, sticky='w', padx=5, pady=(10,5))
ttk.Entry(content_file_frame, textvariable=output_filename, width=40).grid(row=2, column=1, pady=(10,5), sticky='w')

predict_file_button = ttk.Button(content_file_frame, text="üì§ D·ª∞ ƒêO√ÅN T·ª™ FILE", command=call_predict_from_file)
predict_file_button.grid(row=3, column=0, columnspan=3, pady=20)

file_result_label = ttk.Label(content_file_frame, text="", font=("Segoe UI", 12, "bold"), background='white', wraplength=500, justify='center')
file_result_label.grid(row=4, column=0, columnspan=3, pady=15)

# Ch·∫°y v√≤ng l·∫∑p ch√≠nh c·ªßa ·ª©ng d·ª•ng
root.mainloop()